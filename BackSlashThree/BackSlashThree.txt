CISC 16 bits address, 8/16 bits data   0x5C33 "\\3"
little-endian data access and immediate encoding
Event/Interruption enabled
Hypervisor controlled
No stack/code/data protection
No multicore capabilities
No coprocessor capabilities


REGISTERS

11 registers (4 times 16 bits general purpose registers overlaying the 8 times 8 bits general purpose registry)
16 bits stack, growing downward
dedicated purpose register
	PC		: 16 bits : Reset at [0] (reset handler) : Program Counter , is where the CPU is fetching instruction and immediate data
	FL   	: 8(internal)/16 bits(when stored in stack) : Reset at 0x0000 : CPU status flags INVZC (interrupt, Negative, Overflow, Zero, Carry)
	SP		: 16 bits : Reset at 0x0400 (initialized to 0x0400)
general registers
	B7 W3(high)		
	B6 W3(low)
	B5 W2(high)
	B4 W2(low)
	B3 W1(high)
	B2 W1(low)
	B1 W0(high)
	B0 W0(low)

	Wx : 4 times 16 bits registers, 2 bits encoding (W0:00, W1:01, W2:10, W3:11)
	Rx : 8 times 8 bits registers, 3 bits encoding (B0:000, B1:001, B2:010, B3:011, B4:100, B5:101, B6:110, B7:111)
If CPU registers is a C language structure on a Little-Endian data access then it may looks like

#define BYTE unsigned char
#define WORD unsigned short
#define BIT unsigned short
struct bs3_registers
{
    WORD PC;
    union
    {
        WORD FL;
        struct 
        {
            BIT C:1;
            BIT Z:1;
            BIT V:1;
            BIT N:1;
            BIT I:1;
            BIT reserved:11;
        };
    };
    WORD SP;
    union 
    {
        WORD W[4];
        BYTE B[8];
    };
};


INSTRUCTION
	1 or 2 bytes operator, 0, 1 or 2 bytes immediate data
	instruction can be composed by an Opcode and possible OpParam and an Immediate 8 or 16 bits value

	OpCode	: Operation Code, corresponding to one of the valid value in the intruction memonic table code
	OpParam	: 8 bits byte parameter of Operation code
	immB	: 8 bits byte immediate value, the value can be signed or unsigned 
	LimmW	: 8 bits byte representing the LSB of a 16 bits immediate value that can be signed or unsigned
	HimmW	: 8 bits byte representing the MSB of a 16 bits immediate value that can be signed or unsigned
	Instruction is executed at PC register address
	PC+0,	PC+1,	PC+2,	PC+3
	Opcode
	Opcode	immB
	Opcode	LimmW	HimmW
	Opcode	OpParam
	Opcode	OpParam	immB
	Opcode	OpParam LimmW	HimmW
	If the instruction use the PC register (e.g conditional branching) the PC value used is the address of the next instruction,
	except for instruction 'PUSH PC' using this instruction address 
	Each Opcode correspond to a unique instruction size (1, 2, 3 or 4 bytes long)	


MEMORY MAP
	2^16 memory space, adressing 8bits byte
	address from 0x0000 to 0xFFFF
	Memory initialized by Hypervisor. 
	Memory map : RAM and I/O 
	0000 - 001F : interruption handler
		vector 0  : 0000 : Reset handler (contains address of bootstrap at RESET time ) / may be redefined by program execution (e.g for system library purpose)
		vector 1  : 0002 : Escape to CPU hypervisor ( it is not a address and is ignored, keep 0x0000. Only to be used with INT 1, instruction)
		vector 2  : 0004 : Hypervisor Event (handler of supervisor event, data at 0030-00FF)
		vector 3  : 0006 : System Timer (periodic interuption, by clock count)
		vector 4  : 0008 : byte input data event (Hypervisor data input event, meta and data at 0020, 0021)
		vector 5  : 000A : data block input data (Hypervisor data input event, metadata at 002A-002F)
		vector 6  : 000C : Division by Zero (can be catch by hypervisor)
		vector 7  : 000E : Bad instruction (can be catch by hypervisor)
		vector 8  : 0010 : RTC 72421 signal
		vector 9  : 0012 : user defined
		vector 10 : 0014 : user defined
		vector 11 : 0016 : user defined
		vector 12 : 0018 : user defined
		vector 13 : 001A : user defined
		vector 14 : 001C : user defined
		vector 15 : 001E : user defined
	0020 - 002F : Hypervisor data block receiver exchange memory
		0020 : data block input ready
		0021 : reserved
		0022 : data block input address
		0024 : data block input length 
		0026-002F : reserved data for Hypervisor working
	0030 - 00FF: Hypervisor Event data (768 bytes)
		0030 : 16 bits Event Id
		0032-00FF : Event data, with structure depending of Event Id
	0100 - 01FF : reserved for I/O (256 I/O ports)
		0100 : byte input data
		0101 : input data ready (==0 , 0100 is ready for a read operation, ==FF no input available, ==01 wait(about to come))
		0102 : byte output data
		0103 : output data ready (==0 , 0102 is ready for a write operation, ==FF no output available, ==01 wait(about to come))
		0104 : byte secondary output data
		0105 : secondary output data ready (==0, 0104 is ready for write operation, ==FF no output available, ==01 wait(about to come))
		0106 : reserved byte I/O
		0107 ; reserved byte I/O
		0108 : Timer clock count low  (32 bits counters, set here from 0106 0109, the tick delay)
		010A : Timer clock count high (a word write operation at this address 010B (byte at 010B or word at 010A) will restart the timer counter)
		010C : Timer repeat(0) or once(1) (0 = when timer is complete then repreat the timer, 1= when timer is complete the timer is not re-armed)
		010D : reserved IO
		010E : BS3 IRQ controller ( read for Number of pending IRQ, write anything to clear the pending IRQs)
		010F : reserved IO
		0110 : RTC 72421 S1 register
		0111 : RTC 72421 S10 register
		0112 : RTC 72421 MI1 register
		0113 : RTC 72421 MI10 register
		0114 : RTC 72421 H1 register
		0115 : RTC 72421 H10 register
		0116 : RTC 72421 D1 register
		0117 : RTC 72421 D10 register
		0118 : RTC 72421 MO1 register
		0119 : RTC 72421 MO10 register
		011A : RTC 72421 Y1 register
		011B : RTC 72421 Y10 register
		011C : RTC 72421 W register
		011D : RTC 72421 CD register
		011E : RTC 72421 CE register
		011F : RTC 72421 CF register
		0120 - 01FF : other system I/O
	0200 - 03FF : Default Stack(grow downward, SP initial value to 0400) / possible Data / possible Code		
	0400 - FFFF : Code / Data(ROM, RAM System or shared with device) / possible stack

INSTRUCTION SET (fully qualified 225 CPU instruction)

Human Mnemonic (47 Human handlable instructions)		
	Misc	
		NOP, HLT, RESET, WAIT, HEVT, LEA, CLx, STx
	Core I/O	
		IN, OUT, OUT2
	Unconditional branching	
		INT, J, C, RET, IRET
	Conditional Branching	
		Jx
	Direct Memory Access	
		LD, SR
	Stack memory Access	
		PUSH, POP, DROP, DUP
	UAL Binary	
		NOT, AND, OR, EOR, BIC, TST, SHL, SHR, SAR, ROR, ROL
	Reg transfer	
		MOV, SWP
	UAL Simple math	
		INC, DEC, NEG, ADD, SUB, SBB, CMP
	UAL Math 	
		MUL, IMUL, DIV,	IDIV

Intruction memonic table code (8 bits byte raw opcode : Horizontal MS4bits, Vertical LS4bits)
	0-	1-	2-	3-	4-	5-	6-	7-	8-	9-	A-	B-	C-	D-	E-	F-
-0	NOP	LEAW0	INT0	J_W0	JZ	LDBm0	LDWm0	SRBm0	SRWm0	ANDB	ANDW	MULB	ANDBI	ANDWI	MULBI	
-1	INB	LEAW1	INT1	J_W1	JNZ	LDBm1	LDWm1	SRBm1	SRWm1	ORB	ORW	IMULB	ORBI	ORWI	IMULBI	
-2	OUTB	LEAW2	INT2	J_W2	JC	LDBm2	LDWm2	SRBm2	SRWm2	EORB	EORW	DIVB	EORBI	EORWI	DIVBI	
-3	OUTB2	LEAW3	INT3	J_W3	JNC	LDBm3	LDWm3	SRBm3	SRWm3	BICB	BICW	IDIVB	BICBI	BICWI	IDIVBI	
-4	OUTBI	LEAB0	INT4	C_W0	JN	LDBm4	LDWm4	SRBm4	SRWm4	TSTB	TSTW		TSTBI	TSTWI		
-5	OUTB2I	LEAB1	INT5	C_W1	JNN	LDBm5	LDWm5	SRBm5	SRWm5	SHLB	SHLW		SHLB1	SHLW1		
-6		LEAB2	INT6	C_W2	JV	LDBm6	LDWm6	SRBm6	SRWm6	SHRB 	SHRW	MOVB	SHRB1	SHRW1	MOVBI	
-7		LEAB3	INT7	C_W3	JNV	LDBm7	LDWm7	SRBm7	SRWm7	SARB	SARW	SWPB	SARB1	SARW1		
-8		CLC	INT8		JA	POPB0	POPW0	PUSHB0	PUSHW0	RORB	RORW	MULW	INCB	INCW	MULWI	
-9		CLZ	INT9		JBE	POPB1	POPW1	PUSHB1	PUSHW1	ROLB	ROLW	IMULW	DECB	DECW	IMULWI	
-A		CLV	INT10		JGE	POPB2	POPW2	PUSHB2	PUSHW2	NOTB	NOTW	DIVW	NEGB	NEGW	DIVWI	STI
-B		CLN	INT11		JL	POPB3	POPW3	PUSHB3	PUSHW3	ADDB	ADDW	IDIVW	ADDBI	ADDWI	IDIVWI	CLI
-C		STC	INT12	RET	JGE	POPB4	POPA	PUSHB4	PUSHA	ADCB	ADCW	MOVW	ADCBI	ADCWI	MOVWI	HEVT
-D		STZ	INT13	IRET	JLE	POPB5	POPF	PUSHB5	PUSHF	SUBB	SUBW	MOVSW	SUBBI	SUBWI	MOVSI	WAIT
-E		STV	INT14	J_A	J_R	POPB6	POPPC	PUSHB6	PUSHPC	SBBB	SBBW	MOVWS	SBBBI	SBBWI		RESET
-F		STN	INT15	C_A	C_R	POPB7	DROP	PUSHB7	DUP	CMPB	CMPW	SWPW	CMPBI	CMPWI		HLT



transfer (56)
	registre => memory
	memory => registre
	CPU status flag untouched
	memory addressing mode (8 modes : encoding 3 bits) used for transfer insruction
		000 : m0 : [ImmW]
		001 : m1 : [Wx]
		010 : m2 : [Wx + immB]
		011 : m3 : [SP + Wx]
		100 : m4 : [SP + immB]
		101 : m5 : [Wx + Wy]
		110 : m6 : [SP + Wx + immB]
		111 : m7 : [Wx + Wy + immB]

	LD	Bx [ImmW]		: LDBm0 | '00000xxx' | 'iiiiiii' | 'IIIIIIII'	{x = m[++PC] & 7; immW = m[++PC] | ((WORD)m[++PC])<<8; PC++ ; B[x] = m[immW]}
	LD	Wx [ImmW]		: LDWm0 | '000000xx' | 'iiiiiii' | 'IIIIIIII'	{x = m[++PC] & 3; immW = m[++PC] | ((WORD)m[++PC])<<8; PC++ ; W[x] = m[immW]}
	SR	Bx [ImmW]		: SRBm0 | '00000xxx' | 'iiiiiii' | 'IIIIIIII'	{x = m[++PC] & 7; immW = m[++PC] | ((WORD)m[++PC])<<8; PC++; m[immW] = B[x]}
	SR	Wx [ImmW]		: SRWm0 | '000000xx' | 'iiiiiii' | 'IIIIIIII'	{x = m[++PC] & 3; immW = m[++PC] | ((WORD)m[++PC])<<8; PC++; m[immW] = W[x]}
	LD	Bx [Wy] 		: LDBm1 | '00yy0xxx' 				{x = m[++PC] & 7; y = (m[PC++] & 0x30) >> 4; B[x] = m[W[y]]}
	LD	Wx [Wy]			: LDWm1 | '00yy00xx'				{x = m[++PC] & 3; y = (m[PC++] & 0x30) >> 4; W[x] = m[W[y]]}
	SR	Bx [Wy] 		: SRBm1 | '00yy0xxx'				{x = m[++PC] & 7; y = (m[PC++] & 0x30) >> 4; m[W[y]] = B[x]}
	SR	Wx [Wy] 		: SRWm1 | '00yy00xx'				{x = m[++PC] & 3; y = (m[PC++] & 0x30) >> 4; m[W[y]] = W[x]}
	LD	Bx [Wy + immB]		: LDBm2 | '00yy0xxx' | 'iiiiiiii'		{x = m[++PC] & 7; y = (m[PC++] & 0x30) >> 4; immB = m[PC++]; B[x] = m[W[y] + immB]}
	LD	Wx [Wy + immB]		: LDWm2 | '00yy00xx' | 'iiiiiiii'		(x = m[++PC] & 3; y = (m[PC++] & 0x30) >> 4; immB = m[PC++]; W[x] = m[W[y] + immB])
	SR	Bx [Wy + immB]		: SRBm2 | '00yy0xxx' | 'iiiiiiii'		(PC += 3, [Wy + immB] = Bx)
	SR	Wx [Wy + immB]		: SRWm2 | '00yy00xx' | 'iiiiiiii'		(PC += 3, [Wy + immB] = Wx)
	LD	Bx [SP + Wy]		: LDBm3 | '00yy0xxx' 				(PC += 2, Bx = [SP + Wy])
	LD	Wx [SP + Wy]		: LDWm3 | '00yy00xx'				(PC += 2, Wx = [SP + Wy])
	SR	Bx [SP + Wy]		: SRBm3 | '00yy0xxx'				(PC += 2, [SP + Wy] = Bx)
	SR	Wx [SP + Wy] 		: SRWm3 | '00yy00xx'				(PC += 2, [SP + Wy] = Wx)
	LD	Bx [SP + immB]		: LDBm4 | '00000xxx' | 'iiiiiiii'		(PC += 3, Bx = [SP + immB])
	LD	Wx [SP + immB]		: LDWm4 | '000000xx' | 'iiiiiiii'		(PC += 3, Wx = [SP + immB])
	SR	Bx [SP + immB]		: SRBm4 | '00000xxx' | 'iiiiiiii'		(PC += 3, [SP + immB] = Bx)
	SR	Wx [SP + immB]		: SRWm4 | '000000xx' | 'iiiiiiii'		(PC += 3, [SP + immB] = Wx)
	LD	Bx [Wy + Wz]		: LDBm5 | 'zzyy0xxx' 				(PC += 2, Bx = [Wy + Wz])
	LD	Wx [Wy + Wz]		: LDWm5 | 'zzyy00xx'				(PC += 2, Wx = [Wy + Wz])
	SR	Bx [Wy + Wz]		: SRBm5 | 'zzyy0xxx'				(PC += 2, [Wy + Wz] = Bx)
	SR	Wx [Wy + Wz]		: SRWm5 | 'zzyy00xx'				(PC += 2, [Wy + Wz] = Wx)
	LD	Bx [SP + Wy + immB]	: LDBm6 | '00yy0xxx' | 'iiiiiiii' 		(PC += 3, Bx = [SP + Wy + immB])
	LD	Wx [SP + Wy + immB]	: LDWm6 | '00yy00xx' | 'iiiiiiii'		(PC += 3, Wx = [SP + Wy + immB])
	SR	Bx [SP + Wy + immB]	: SRBm6 | '00yy0xxx' | 'iiiiiiii'		(PC += 3, [SP + Wy + immB] = Bx)
	SR	Wx [SP + Wy + immB]	: SRWm6 | '00yy00xx' | 'iiiiiiii'		(PC += 3, [SP + Wy + immB] = Wx)
	LD	Bx [Wy + Wz + immB]	: LDBm7 | 'zzyy0xxx' | 'iiiiiiii' 		(PC += 3, Bx = [Wy + Wz + immB])
	LD	Wx [Wy + Wz + immB]	: LDWm7 | 'zzyy00xx' | 'iiiiiiii'		(PC += 3, Wx = [Wy + Wz + immB])
	SR	Bx [Wy + Wz + immB]	: SRBm7 | 'zzyy0xxx' | 'iiiiiiii'		(PC += 3, [Wy + Wz + immB] = Bx)
	SR	Wx [Wy + Wz + immB]	: SRWm7 | 'zzyy00xx' | 'iiiiiiii'		(PC += 3, [Wy + Wz + immB] = Wx)
	PUSH PC				: PUSHPC					(SP -= 2, [SP] = PC, PC += 1 ;on stack, PC is address of this instruction : usefull for DO LOOP clock)
	PUSHF				: PUSHF						(PC += 1, SP -= 2, [SP] = FL)
	PUSHA				: PUSHA						(PC += 1, for x in 0 to 3 do (SP -= 2, [SP] = Wx))
	PUSH	Wx			: PUSHWxx					(PC += 1, SP -= 2, [SP] = Wx)
	PUSH	Bx			: PUSHBxxx					(PC += 1, SP -= 2, [SP] = (0x00FF AND Bx))
	DUP				: DUP						(PC += 1, SP -= 2, [SP] = [SP + 2])
	POP PC				: POPPC						(PC = [SP], SP += 2)
	POPF				: POPF						(PC += 1, FL = [SP], SP+= 2)
	POPA				: POPA						(PC += 1, for x in 3 to 0 do (Wx = [SP], SP += 2))
	POP	Wx			: POPWxx					(PC += 1, Wx = [SP], SP += 2)
	POP	Bx			: POPBxxx					(PC += 1, Bx = low[Sp], SP += 2)
	DROP				: DROP						(PC += 1, SP += 2)

register transform UAL (81)
	Byte ( 39)
		MOV	Bx By	: MOVB	| '0yyy0xxx'
		MOV	Bx immB : MOVBI | '00000xxx' | 'iiiiiiii'
		SWP	Bx By	: SWPB	| '0yyy0xxx'

		NOT	Bx	: NOTB	| '00000xxx' 
		AND	Bx By	: ANDB	| '0yyy0xxx'
		AND	Bx immB	: ANDBI | '00000xxx' | 'iiiiiiii'
		OR	Bx By	: ORB	| '0yyy0xxx'
		OR	Bx immB : ORBI	| '00000xxx' | 'iiiiiiii'
		EOR	Bx By	: EORB	| '0yyy0xxx'
		EOR	Bx immB	: EORBI	| '00000xxx' | 'iiiiiiii'
		BIC	Bx By	: BICB	| '0yyy0xxx'
		BIC	Bx immB	: BICBI	| '00000xxx' | 'iiiiiiii'
		NEG 	Bx	: NEGB	| '00000xxx'
		INC	Bx	: INCB	| '00000xxx'
		DEC	Bx	: DECB	| '00000xxx'
		ADD	Bx By	: ADDB	| '0yyy0xxx'
		ADD	Bx immB	: ADDBI	| '00000xxx' | 'iiiiiiii'
		SUB	Bx By	: SUBB	| '0yyy0xxx'
		SUB	Bx immB	: SUBBI	| '00000xxx' | 'iiiiiiii'
		ADC	Bx By	: ADCB	| '0yyy0xxx'
		ADC	Bx ImmB	: ADCBI	| '00000xxx' | 'iiiiiiii'
		SBB	Bx By	: SBBB	| '0yyy0xxx'
		SBB	Bx immB	: SBBBI	| '00000xxx' | 'iiiiiiii'
		CMP	Bx By	: CMPB	| '0yyy0xxx'
		CMP	Bx ImmB : CMPBI	| '00000xxx' | 'iiiiiiii'
		TST	Bx By	: TSTB	| '0yyy0xxx'
		TST	Bx ImmB : TSTBI	| '00000xxx' | 'iiiiiiii'
		SHL	Bx 1	: SHLB1	| '00000xxx'
		SHL	Bx By	: SHLB	| '0yyy0xxx'
		SHR	Bx 1	: SHRB1	| '00000xxx'
		SHR	Bx By	: SHRB	| '0yyy0xxx'
		SAR	Bx 1	: SARB1	| '00000xxx'
		SAR	Bx By	: SARB	| '0yyy0xxx'
		ROR	Bx 1	: RORB	| '00000xxx'	
		ROL	Bx 1	: ROLB	| '00000xxx'

		MUL	Bx By		: MULB	| '0yyy0xxx'			(unsigned w = (Bx * By): By = highbyte(w), Bx = lowbyte(w))
		MUL	Bx immB By	: MULBI	| '0yyy0xxx' | 'iiiiiii'	(unsigned w = Bx *imm  : By = highbyte(w), Bx = lowbyte(w))
		IMUL	Bx By		: IMULB	| '0yyy0xxx'			(signed   w = Bx * By  : By = highbyte(w), Bx = lowbyte(w))
		IMUL	Bx SimmB By	: IMULBI| '00000xxx' | 'siiiiiii'	(signed   w = Bx *imm  : By = highbyte(w), Bx = lowbyte(w))
		DIV	Bx By		: DIVB	| '0yyy0xxx'			(unsigned b = Bx / By   r = Bx % By  : By = r, Bx = b)
		DIV	Bx immB 	: DIVBI	| '0yyy0xxx' | 'iiiiiiii'	(unsigned b = Bx / immB r = Bx % ImmB: By = r, Bx = b)
		IDIV	Bx By		: IDIVB	| '0yyy0xxx'			(signed   b = Bx / By   r = Bx % By  : By = r, Bx = b)
		IDIV	Bx SimmB	: IDIVBI| '00000xxx' | 'siiiiiii'	(signed   b = Bx / immB r = Bx % ImmB: By = r, Bx = b)

	Word ( 42)
		MOV	Wx Wy	: MOVW	| '00yy00xx'
		MOV	Wx immW	: MOVWI	| '000000xx' | 'iiiiiiii' | 'IIIIIIII'
		MOV	SP Wx	: MOVSW	| '000000xx'
		MOV	SP immW	: MOVSI	| 'iiiiiiii' | 'IIIIIIII'
		MOV	Wx SP	: MOVWS	| '000000xx'
		SWP	Wx Wy	: SWPW	| '00yy00xx'

		NOT	Wx	: NOTW	| '000000xx'
		AND	Wx Wy	: ANDW	| '00yy00xx'
		AND	Wx immW	: ANDWI	| '000000xx' | 'iiiiiiii' | 'IIIIIIII'
		OR	Wx Wy	: ORW	| '00yy00xx'
		OR	Wx immW	: ORWI	| '000000xx' | 'iiiiiiii' | 'IIIIIIII'
		EOR	Wx Wy	: EORW	| '00yy00xx'
		EOR	Wx immW : EORWI	| '000000xx' | 'iiiiiiii' | 'IIIIIIII'
		BIC	Wx Wy	: BICW	| '00yy00xx' 
		BIC	Wx immW	: BICWI	| '000000xx' | 'iiiiiiii' | 'IIIIIIII'
		NEG 	Wx	: NEGW	| '000000xx'
		INC	Wx	: INCW	| '000000xx'
		DEC	Wx	: DECW	| '000000xx'
		ADD	Wx Wy	: ADDW	| '00yy00xx'
		ADD	Wx immW	: ADDWI	| '000000xx' | 'iiiiiiii' | 'IIIIIIII'
		SUB	Wx Wy	: SUBW	| '00yy00xx'
		SUB	Wx immW	: SUBWI	| '000000xx' | 'iiiiiiii' | 'IIIIIIII'
		ADC	Wx Wy	: ADCW	| '00yy00xx'
		ADC	Wx immW : ADCWI	| '000000xx' | 'iiiiiiii' | 'IIIIIIII'
		SBB	Wx Wy	: SBBW	| '00yy00xx'
		SBB	Wx immW	: SBBWI	| '000000xx' | 'iiiiiiii' | 'IIIIIIII'
		CMP	Wx Wy	: CMPW	| '00yy00xx' 
		CMP	Wx immW	: CMPWI	| '000000xx' | 'iiiiiiii' | 'IIIIIIII'
		TST	Wx Wy	: TSTW	| '00yy00xx'
		TST	Wx immW	: TSTWI	| '000000xx' | 'iiiiiiii' | 'IIIIIIII'
		SHL	Wx 1	: SHLW1	| '000000xx'
		SHL	Wx By	: SHLWB	| '0yyy00xx'
		SHR	Wx 1	: SHRW1	| '000000xx'
		SHR	Wx By	: SHRWB	| '0yyy00xx'
		SAR	Wx 1	: SARW1	| '000000xx'
		SAR	Wx By	: SARWB	| '0yyy00xx'
		ROR	Wx 1	: RORW	| '000000xx'
		ROL	Wx 1	: ROLW	| '000000xx'


		MUL	Wx Wy Wz	: MULW	| 'zzyy00xx'				(unsigned dw = Wx * Wy   : Wz = highword(dw), Wx = lowword(dw) )
		MUL	Wx immW	Wy	: MULWI	| '00yy00xx' | 'iiiiiiii' | 'IIIIIIII'	(unsigned dw = Wx * immW : Wy = highword(dw), Wx = lowword(dw) )
		IMUL	Wx Wy Wz	: IMULW	| 'zzyy00xx'				(signed   dw = Wx * Wy   : Wz = highword(dw), Wx = lowword(dw) )
		IMUL	Wx SimmW Wy	: IMULWI| '00yy00xx' | 'iiiiiiii' | 'SIIIIIII'	(signed   dw = Wx * immW : Wy = highword(dw), Wx = lowword(dw) )
		DIV	Wx Wy Wz	: DIVW	| 'zzyy00xx'				(unsigned w = Wx / Wy,   r= Wx % Wy   : Wz = r, Wx = w)
		DIV	Wx immW Wy	: DIVWI	| '00yy00xx' | 'iiiiiiii' | 'IIIIIIII'	(unsigned w = Wx / immW, r= Wx % immW : Wy = r, Wx = w )
		IDIV	Wx Wy Wz	: IDIVW	| 'zzyy00xx'				(signed   w = Wx / Wy,   r= Wx % Wy   : Wz = r, Wx = w)
		IDIV	Wx SimmW Wy	: IDIVWI| '00yy00xx' | 'iiiiiiii' | 'SIIIIIII'	(signed   w = Wx / immW, r= Wx % immW : Wy = r, Wx = w )
	
branching: (44)
	J	relative_immediate	: J_R | 'siiiiiii'			(PC += 2, PC = PC + SimmB)
	J	absolute_immediate	: J_A |	'iiiiiiii' | 'IIIIIIII'		(PC = immW )
	J	Wx			: J_Wxx					(PC = Wx)
	C	relative_immediate	: C_R | 'siiiiiii'			(PC += 2, SP -= 2, [SP] = PC, PC = PC + SimmB)
	C	absolute_immediate	: C_A | 'iiiiiiii' | 'IIIIIIII'		(PC += 3, SP -= 2, [SP] = PC, PC = immW)
	C	Wx			: C_Wxx					(PC += 1, SP -= 2, [SP] = PC, PC = Wx)
	INT	0 to 15			: INTxxxx				(PC += 2, SP -= 2, [SP] = PC, SP -=2, [SP] = FL, PC = [x<<1] only if x != 1 no PC assignement otherwise)
	
	JE/JZ	relative_immediate	: JZ  | 'siiiiiii'			(PC += 2, If Z==1 then PC = PC + SimmB)
	JNE/JNZ	relative_immediate	: JNZ | 'siiiiiii'			(PC += 2, If Z==0 then PC = PC + SimmB)
	JC/JAE	relative_immediate	: JC  | 'siiiiiii'  			(PC += 2, If C==1 then PC = PC + SimmB)
	JNC/JB	relative_immediate	: JNC | 'siiiiiii'  			(PC += 2, If C==O then PC = PC + SimmB)
	JN/JMI	relative_immediate	: JN  | 'siiiiiii'  			(PC += 2, If N==1 then PC = PC + SimmB)
	JNN/JPZ	relative_immediate	: JNN | 'siiiiiii'  			(PC += 2, If N==0 then PC = PC + SimmB)
	JV 	relative_immediate	: JV  | 'siiiiiii'  			(PC += 2, If V==1 then PC = PC + SimmB)
	JNV	relative_immediate	: JNV | 'siiiiiii'  			(PC += 2, If V==0 then PC = PC + SimmB)
	JA	relative_immediate	: JA  | 'siiiiiii'  			(PC += 2, If (C==1) && (Z==0) then PC = PC + SimmB)
	JBE	relative_immediate	: JBE | 'siiiiiii'  			(PC += 2, If (C==0) || (Z==1) then PC = PC + SimmB)
	JGE	relative_immediate	: JGE | 'siiiiiii'  			(PC += 2, If N==V then PC = PC + SimmB)
	JL	relative_immediate	: JL  | 'siiiiiii'  			(PC += 2, If N!=V then PC = PC + SimmB)
	JG	relative_immediate	: JG  | 'siiiiiii'  			(PC += 2, If (Z==0) && (N==V) then PC = PC + SimmB)
	JLE	relative_immeidate	: JLE | 'siiiiiii'  			(PC += 2, If (Z==1) || (N!=V) then PC = PC + SimmB)

	RET				: RET					(PC = [SP], SP += 2)
	IRET				: IRET					(FL = [SP], SP += 2, PC = [SP])

Core I/O
	IN	Bx			: INB   | '00000xxx'			(PC += 2, Z=([0101]==0x01), V=([0101]==0xFF), if Z==0 then Bx = [0100])
	OUT	Bx			: OUTB  | '00000xxx'			(PC += 2, Z=([0103]==0x01), V=([0103]==0xFF), if Z==0 then [0102]=Bx)
	OUT	immB			: OUTBI	| 'iiiiiiii'			(PC += 2, Z=([0103]==0x01), V=([0103]==0xFF), if Z==0 then [0102]=immB)
	OUT2	Bx			: OUTB2 | '00000xxx'			(PC += 2, Z=([0105]==0x01), V=([0105]==0xFF), if Z==0 then [0104]=Bx)
	OUT2	immB			: OUTB2I| 'iiiiiiii'			(PC += 2, Z=([0105]==0x01), V=([0101]==0xFF), if Z==0 then [0104]=immB)

Misc (23)
	NOP				: NOP					(PC += 1)
	HLT				: HLT					(Hypervisor stop CPU state)
	RESET				: RESET					(Hypervisor reintialize the memory(with prepared RAM content) and CPU)
	WAIT				: WAIT					(PC += 1, Hypervisor wait interruption CPU state)
	HEVT				:					(PC += 1, send event to Hypervisor)

	ST	I			: STI					(I=1)
	ST	C			: STC					(C=1)
	ST	Z			: STZ					(Z=1)
	ST	V			: STV					(V=1)
	ST	N			: STN					(N=1)
	
	CL	I			: CLI					(I=0)
	CL	C			: CLC					(C=0)
	CL	Z			: CLZ					(V=0)
	CL	N			: CLN					(N=0)
	LEA	Wx SimmW  		: LEAW xx | 'iiiiiiii' | 'SIIIIIII'	(PC += 3, Wx = PC + SimmW)
	LEA	Wx SimmB  		: LEAB xx | 'siiiiiii' 			(PC += 2, Wx = PC + SimmB) 
